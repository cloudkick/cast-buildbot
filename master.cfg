# -*- python -*-
# ex: set syntax=python:

from buildbot.steps.source import Git
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.shell import ShellCommand, Configure
from buildbot.process import factory
from buildbot.steps.shell import Compile
from buildbot.steps import trigger
from buildbot.schedulers import basic, timed, triggerable

from buildbot.status import html
from buildbot.status import mail
from buildbot.status import words

c = BuildmasterConfig = {}

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("slave-ubuntu9.10_x86_64", ""),
  BuildSlave("slave-freebsd8_amd64", ""),
]

c['slavePortnum'] = 9999

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = []

####### BUILDERS

CAST_REPO_URL = "git://github.com/cloudkick/cast.git"
NODEJS_REPO_URL = "git://github.com/joyent/node.git"

NODEJS_BRANCHES = [ 'v0.4', 'master' ]

c['builders'] = []

# NodeJS builders
for branch in NODEJS_BRANCHES:
  for slave in c['slaves']:
    name = slave.slavename.replace('slave-', '')
    builder_name = "nodejs-" + branch + "-" + name
    f = factory.BuildFactory()
    f.addStep(ShellCommand(command = ['sh', 'update_branch.sh', builder_name, NODEJS_REPO_URL, branch,
                                      '/data/node/'], workdir="../"))
    f.addStep(trigger.Trigger(schedulerNames=['cast tests %s' % (branch)], waitForFinish = False))

    c['builders'].append(
    {
      'name': "nodejs-" + branch + "-" + name,
      'slavename': slave.slavename,
      'builddir': "nodejs-" + branch + "-" + name,
      'factory': f,
    })

# Cast builders
for slave in c['slaves']:
  for branch in NODEJS_BRANCHES:
    name = slave.slavename.replace('slave-', '')
    f = factory.BuildFactory()

    f.addStep(Git(repourl=CAST_REPO_URL, mode="copy"))
    f.addStep(ShellCommand(command = ["scons", "test"], timeout=100, description='testing', \
                           descriptionDone='tests'))
    f.addStep(ShellCommand(command = ["scons", "jslint"], timeout=100, description='jslint', \
              descriptionDone='jslint'))
    c['builders'].append(
    {
      'name': "cast-nodejs-" + branch + "-" + name,
      'slavename': slave.slavename,
      'env': {'NODE_BIN_PATH': '/data/node/' + branch + '/bin/node',
              'NODE': '/data/node/' + branch + '/bin/node',
              'PATH': '/data/node/' + branch + '/bin/:${PATH}'},
      'builddir': "cast-nodejs-" + branch + "-" + name,
      'factory': f,
    })

cast_tests = {}
node_build = basic.Scheduler("nodejs build", treeStableTimer=30, \
                             builderNames=[x["name"] for x in c['builders'] if x["name"].find("nodejs") == 0])

for branch in NODEJS_BRANCHES:
  cast_tests[branch] = triggerable.Triggerable(name="cast tests %s" % (branch),
                                      builderNames=[x["name"] for x in c['builders'] \
                                      if x["name"].find("cast-nodejs") == 0 and \
                                      x["name"].find(branch) != -1])

c['schedulers'] = [node_build]

for cast_builder in cast_tests.values():
  c['schedulers'].append(cast_builder)

####### STATUS TARGETS

c['status'] = []

from buildbot.status.web import auth, authz
users = [('castdev', '')]

authz_cfg=authz.Authz(
    auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = True,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)
c['status'].append(html.WebStatus(http_port="tcp:8020", authz=authz_cfg))

c['status'].append(mail.MailNotifier(fromaddr="cast-buildbot@cast-project.org",
                                    mode="failing",
                                    extraRecipients=["eng@cloudkick.com"],
                                    sendToInterestedUsers=True,
                                    addLogs=True))
c['status'].append(words.IRC(host="irc.freenode.net", nick="cast-bb",
                              channels=["#cast-project"]))

c['projectName'] = "Cast"
c['projectURL'] = "http://www.cast-project.org"

c['buildbotURL'] = "http://buildbot.cast-project.org/"
